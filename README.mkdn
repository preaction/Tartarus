# NAME

Tartarus - The scalable data warehouse of the gods

# VERSION

version 0.001

# STATUS

<a href="https://travis-ci.org/preaction/Tartarus"><img src="https://travis-ci.org/preaction/Tartarus.svg?branch=master"></a><a href="https://coveralls.io/r/preaction/Tartarus"><img src="https://coveralls.io/repos/preaction/Tartarus/badge.png" alt="Coverage Status" /></a>

# SYNOPSIS

    # tartarus.yml
    mounts:
        user:
            $class: Tartarus::DataSource::Postgres
            host: localhost
        stats:
            $class: Tartarus::DataSource::RRDTool
            root: /var/db/rrdtool
        orders:
            $class: Tartarus::DataSource::MySQL
            host: db.example.com
    transport:
        $class: Tartarus::Transport::ZeroMQ
        endpoint: tcp://*:7000
        codec:
            $class: Tartarus::Codec::Sereal

    # Start the server
    tartarus [-f <config_file>]

# DESCRIPTION

Tartarus is a server that provides a unified API on to multiple data
sources, mounted in a tree. Users may make requests of the data, reading
and writing, or they can subscribe to messages as they pass through the
API, allowing for notification of updates.

Tartarus is built to help data warehouses be scalable and flexible. The
unified API makes simple data maintenance tasks trivial, allows for easy
migration of data between backend data platforms, and enables
scalability features like sharding and caching that the backend data
platform may not support.

## Database Agnostic

Tartarus allows for easy querying of data from any kind of data source.
Using Tartarus APIs, data can be moved from one data source to another
with minimal effort.

## Compatible with Any Language

Tartarus allows requests in multiple formats over multiple types of
transports. If you want to write data using JSON over WebSockets, and
read data using Protobuf over ZeroMQ sockets, you can.

## Data Events

As requests and responses are made through Tartarus, events are generated
that can be listened to. These event streams can trigger processing jobs,
allowing you to respond to your data in real time.

## Data On-The-Fly

The Tartarus API is simple, which allows for easy extending. You can
write plugins that generate derived data on-the-fly, or expose data that
aren't typically considered "databases" such as live financial market
data and local SNMP and sensor data. Once the data is connected to
Tartarus, clients can use the existing APIs to access it.

# OVERVIEW

## Data Source

Tartarus collects multiple [data sources](https://metacpan.org/pod/Tartarus::DataSource),
arranged in a tree. Each data source can expose its data as a tree as
well, mapping the data in a logical, navigable structure.

Data sources can be relational databases like Postgres and MySQL,
document stores like MongoDB and ElasticSearch, and time series
databases like RRDTool and Graphite.

Tartarus can use other Tartarus servers as data sources, allowing for
sharding, failover, and other scalability patterns.

Custom data sources can take any form, allowing easy access to things
like SNMP data. Custom data sources can also filter and transform
existing data sources, allowing for on-the-fly transforms and analysis.

## Transport

Tartarus allows incoming connections via a transport, like ZeroMQ,
nanomsg, HTTP, WebSockets, or plain TCP. Multiple transports can be
configured, allowing multiple types of clients.

## Messages

[Tartarus messages](https://metacpan.org/pod/Tartarus::Message) can be serialized by one of many
types of message format using a [Tartarus::Codec](https://metacpan.org/pod/Tartarus::Codec), including Sereal,
Protocol Buffers, MessagePack, Cap'n Proto, JSON, BSON, and more.

Tartarus messages create a common data structure so that different data
sources can be used by the same program.

# ATTRIBUTES

## transport

    transport:
        $class: Tartarus::Transport::ZeroMQ
        $args:
            endpoint: tcp://127.0.0.1:7000
            codec:
                $class: Tartarus::Codec::Sereal

The transport layer to use

## mounts

    mounts:
        /customers:
            $class: Tartarus::DataSource::Postgres
            $args:
                host: localhost
                port: 4660
        /usage:
            $class: Tartarus::DataSource::RRDTool
            $args:
                root_dir: /var/db/rrd

Mount a [data source](https://metacpan.org/pod/Tartarus::DataSource) at a path.

# METHODS

## run

    $t->run();

Start the daemon.

# SEE ALSO

- [Tartarus::DataSource](https://metacpan.org/pod/Tartarus::DataSource)
- [Tartarus::Transport](https://metacpan.org/pod/Tartarus::Transport)
- [Tartarus::Message](https://metacpan.org/pod/Tartarus::Message)
- [Tartarus::Codec](https://metacpan.org/pod/Tartarus::Codec)

# AUTHOR

Doug Bell <preaction@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by Doug Bell.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
